version: "3.9"

services:
  db:
    image: postgres:17-alpine
    container_name: wodeyar-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-wodeyar}
      POSTGRES_USER: ${POSTGRES_USER:-wodeyar}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change-me}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-wodeyar} -d ${POSTGRES_DB:-wodeyar}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    # Your Node API (the Dockerfile you already have in ./api)
    build:
      context: ./backend  
      dockerfile: Dockerfile
    container_name: wodeyar-api
    environment:
      NODE_ENV: production
      PORT: 5000
      # Point to Postgres service name "db"
      DATABASE_URL: postgres://${POSTGRES_USER:-wodeyar}:${POSTGRES_PASSWORD:-change-me}@db:5432/${POSTGRES_DB:-wodeyar}
      # CORS for local dev + prod admin UI
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173,https://admin.wodeyarinsurance.com}
      JWT_SECRET: ${JWT_SECRET:-please-change-me}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5000:5000"
    restart: unless-stopped

  web:
    # Your React frontend (Dockerfile in ./web that builds + serves with Nginx)
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # For Vite: pass VITE_* at build time. For CRA: pass REACT_APP_* at build time.
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:5000}
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000}
    container_name: wodeyar-web
    # No runtime env needed for static Nginxâ€”API URL must be baked at build time.
    depends_on:
      api:
        condition: service_started
    ports:
      - "8080:80"
    restart: unless-stopped

  # (Optional) pgAdmin for DB management
  pgadmin:
    image: dpage/pgadmin4:8
    container_name: wodeyar-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8081:80"
    restart: unless-stopped

volumes:
  db_data:
